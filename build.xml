<?xml version="1.0" encoding="UTF-8"?>
<project name="SwissPaymentSlip" default="build">

    <property name="tools_dir" value="${basedir}/vendor/bin"/>
    <property name="build_dir" value="${basedir}/build"/>
    <property name="vendor_dir" value="${basedir}/vendor"/>

    <condition property="script_ext" value=".bat" else="">
        <os family="windows"/>
    </condition>

    <condition property="ds" value="\" else="/">
        <os family="windows"/>
    </condition>

    <target name="build"
            depends="clean,prepare,lint,phploc,pdepend,phpmd,phpcs,phpcpd,phpunit,apigen"/>

    <target name="deploy"
            depends="clean,prepare,phpunit,apigen"/>


    <target name="clean" unless="clean.done" description="Cleanup build artifacts">
        <delete dir="${build_dir}/coverage"/>
        <delete dir="${build_dir}/logs"/>
        <delete dir="${build_dir}/pdepend"/>
        <property name="clean.done" value="true"/>
    </target>
    <target name="prepare" unless="prepare.done" depends="clean" description="Prepare for build">
        <mkdir dir="${build_dir}/coverage"/>
        <mkdir dir="${build_dir}/logs"/>
        <mkdir dir="${build_dir}/pdepend"/>

        <property name="prepare.done" value="true"/>
        <exec executable="composer${script_ext}">
            <arg value="install" />
            <arg value="--dev" />
        </exec>

    </target>
    <target name="lint" description="Perform syntax check of sourcecode files">
        <apply executable="php" failonerror="true">
            <arg value="-l" />

            <fileset dir="${basedir}/">
                <include name="**/*.php" />
                <include name="**/examples/*.php" />
                <include name="**/src/*.php" />
                <include name="**/tests/*.php" />
                <modified />
                <exclude name="**/vendor/**" />
                <exclude name="**/build/**" />
            </fileset>
        </apply>
    </target>

    <target name="phploc" depends="prepare" description="Measure project size using PHPLOC and log result in CSV and XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${tools_dir}/phploc${script_ext}">
            <arg value="--names" />
            <arg value="*.php"/>
            <arg value="--log-csv" />
            <arg value="${build_dir}/logs/phploc.csv" />
            <arg value="--exclude"/>
            <arg value="${vendor_dir}" />
            <arg value="--exclude"/>
            <arg value="${build_dir}" />
            <arg path="${basedir}" />
        </exec>
    </target>

    <target name="pdepend" depends="prepare" description="Calculate software metrics using PHP_Depend and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${tools_dir}/pdepend${script_ext}">
            <arg value="--jdepend-xml=${build_dir}/logs/jdepend.xml" />
            <arg value="--jdepend-chart=${build_dir}/pdepend/dependencies.svg" />
            <arg value="--overview-pyramid=${build_dir}/pdepend/overview-pyramid.svg" />
            <arg value="--ignore=${vendor_dir}/*,${build_dir}/*" />
            <arg path="${basedir}" />
        </exec>
    </target>

    <target name="phpmd" description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${tools_dir}/phpmd${script_ext}">
            <arg path="${basedir}" />
            <arg value="text" />
            <arg value="${basedir}/phpmd.xml" />
            <arg value="--exclude" />
            <arg value="${vendor_dir}/*,${build_dir}/*" />
            <arg value="--reportfile" />
            <arg value="${build_dir}/logs/pmd.xml" />
        </exec>
    </target>


    <target name="phpcs" description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${tools_dir}/phpcs${script_ext}">
            <arg value="-p" />
            <arg value="--report=checkstyle" />
            <arg value="--report-file=${build_dir}/logs/checkstyle.xml" />
            <arg value="--standard=PSR2" />
            <arg value="--ignore=autoload.php"/>
            <arg value="--ignore=${build_dir}/*,${vendor_dir}/*" />
            <arg path="${basedir}" />
        </exec>
    </target>

    <target name="phpcpd" description="Find duplicate code using PHPCPD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${tools_dir}/phpcpd${script_ext}">

            <arg value="--log-pmd" />
            <arg value="${build_dir}/logs/pmd-cpd.xml" />
            <arg value="--exclude" />
            <arg value="build" />
            <arg value="--exclude" />
            <arg value="vendor" />
            <arg path="${basedir}" />
        </exec>
    </target>

    <target name="apigen" description="Generate API documentation using apigen">
        <mkdir dir="${build_dir}/api"/>

        <exec executable="${tools_dir}/apigen${script_ext}">
            <arg value="generate" />
            <arg value="--source" />
            <arg value="${basedir}/src/" />
            <arg value="--source" />
            <arg value="${basedir}/tests/" />
            <arg value="--exclude" />
            <arg value="${vendor_dir}" />
            <arg value="--exclude" />
            <arg value="${build_dir}" />
            <arg value="--destination" />
            <arg value="${build_dir}/api/" />
            <arg value="--download" />
            <arg value="--todo" />
            <arg value="--internal" />
            <arg value="--deprecated" />
            <arg value="--php" />
            <arg value="--debug" />
            <arg value="--groups" />
            <arg value="packages" />
            <arg value="--title" />
            <arg value="'SwissPaymentSlip'" />
        </exec>
    </target>
    <target name="phpunit" depends="prepare" description="Run unit tests with PHPUnit">
        <exec executable="${tools_dir}/phpunit" failonerror="true">
            <arg value="--log-junit" />
            <arg value="${build_dir}/logs/junit.xml" />
            <arg value="--coverage-clover" />
            <arg value="${build_dir}/logs/clover.xml" />
            <arg value="--configuration" />
            <arg value="${basedir}/phpunit.xml" />
            <arg value="--configuration" />
            <arg value="${basedir}/phpunit-html-coverage.xml" />
        </exec>
    </target>
</project>
